# eosal-defs.txt - Set cmake build environment variables common to all projects.
# 1.9.2021/pekka


macro(print_all_variables)
    message(STATUS "print_all_variables------------------------------------------{")
    get_cmake_property(_variableNames VARIABLES)
    foreach (_variableName ${_variableNames})
        message(STATUS "${_variableName}=${${_variableName}}")
    endforeach()
    message(STATUS "print_all_variables------------------------------------------}")
endmacro()

# print_all_variables()
# set(SUPPORTED_TARGETS esp32)
# message(FATAL_ERROR "HERE ********** ${IDF_TARGET}")

# Espressif IoT Development Framework ***************************
if("${IDF_TARGET}" STREQUAL "esp32")

# ???????????????????????????????????????????????????????????????
  set(SDKCONFIG /coderoot/eosal/osbuild/esp-idf/menuconfig/sdkconfig)

  # Generic target operating system name like "esp". Used as folder name for OS specific code.
  if (NOT DEFINED ENV{E_OS})
    set(ENV{E_OS} "esp32")
  endif()

  # Target operating system version "esp32" is used as name for banary folders and as part of
  # the installation package name.
  if (NOT DEFINED ENV{E_OSVER})
    set(ENV{E_OSVER} "espidf")
  endif()

  # Compiler name, used as part of library and temporary folder name.
  # For example "vs2015", "mingw", "gcc", "gccarm9"...
  if (NOT DEFINED ENV{E_COMPILER})
    set(ENV{E_COMPILER} "xtensa")
  endif()

  if (NOT DEFINED ENV{E_ARCH})
    set(ENV{E_ARCH} "xtensa")
  endif()

  # Root path for build.
  if (NOT DEFINED ENV{E_ROOT})
    set(ENV{E_ROOT} "/coderoot")
  endif()

  # Set up ESP32 include directories (this is probably not the right way to do this).
  include_directories("/coderoot/eosal/osbuild/esp-idf/menuconfig")
  include_directories("$ENV{IDF_PATH}/components/xtensa/include")
  include_directories("$ENV{IDF_PATH}/components/esp_common/include")
  include_directories("$ENV{IDF_PATH}/components/esp_rom/include")
  include_directories("$ENV{IDF_PATH}/components/esp_system/include")
  include_directories("$ENV{IDF_PATH}/components/esp_timer/include")
  include_directories("$ENV{IDF_PATH}/components/log/include")
  include_directories("$ENV{IDF_PATH}/components/esp_hw_support/include")
  include_directories("$ENV{IDF_PATH}/components/soc/include")
  include_directories("$ENV{IDF_PATH}/components/soc/esp32/include")
  include_directories("$ENV{IDF_PATH}/components/spi_flash/include")
  include_directories("$ENV{IDF_PATH}/components/heap/include")
  include_directories("$ENV{IDF_PATH}/components/freertos/include")
  include_directories("$ENV{IDF_PATH}/components/mbedtls/port/include")
  include_directories("$ENV{IDF_PATH}/mbedtls/mbedtls/include")

# Windows ***************************
elseif(WIN32)
  # Generic target operating system name like "windows" or "linux". Used as folder name for OS specific code.
  if (NOT DEFINED ENV{E_OS})
    set(ENV{E_OS} "windows")
  endif()

  # Generic target operating system version "win32", "win64", "ubuntu16064", "mint18", etc.
  # Used as name for binary folders and as part of installation package name.
  if (NOT DEFINED ENV{E_OSVER})
    if (CMAKE_CL_64)
      set(ENV{E_OSVER} "win64")
    else()
      set(ENV{E_OSVER} "win32")
    endif()
  endif()

  # Compiler name, used as part of library and temporary folder name.
  # For example "vs2019", "mingw", "gcc", "gccarm9"...
  if (NOT DEFINED ENV{E_COMPILER})
    set(ENV{E_COMPILER} "vs2019")
  endif()

  # Root path for build.
  if (NOT DEFINED ENV{E_ROOT})
    set(ENV{E_ROOT} "c:/coderoot")
  endif()

# Linux or other unix like operating system ***************************
else()
  # Generic target operating system name like "windows" or "linux". Used as folder name for OS specific code.
  if (NOT DEFINED ENV{E_OS})
    set(ENV{E_OS} "linux")
  endif()

  # Check for Android build
  if (NOT DEFINED ENV{E_ARCH})
     if (DEFINED ANDROID_ABI)
       set(ENV{E_OSVER} "android")
       if (ANDROID_ABI MATCHES "armeabi-v7a")
         set(ENV{E_ARCH} "v7a")
       endif()
       if (ANDROID_ABI MATCHES "x86")
         set(ENV{E_ARCH} "x86")
       endif()
       if (ANDROID_ABI MATCHES "x86_64")
         set(ENV{E_ARCH} "x86_64")
       endif()
       if (DEFINED E_ARCH)
         set(ENV{E_ARCH} "unknown")
       endif()
     endif()
  endif()

  # Target architecture
  # https://sourceforge.net/p/predef/wiki/Architectures/
  if (NOT DEFINED ENV{E_ARCH})
  if (CMAKE_SYSTEM_PROCESSOR MATCHES "(amd64)|(AMD64)|(x86_64)|(X86_64)")
     set(ENV{E_ARCH} "amd64")
  elseif (CMAKE_SYSTEM_PROCESSOR MATCHES "(x86)|(X86)")
     set(ENV{E_ARCH} "x86")
  else()
     set(ENV{E_ARCH} "arm")
  endif()
  endif()

  # Generic target operating system version "win32", "win64", "ubuntu16064", "linux", etc.
  # Used as name for banary folders and as part of installation package name.
  if (NOT DEFINED ENV{E_OSVER})
    if ($ENV{E_ARCH} MATCHES "arm")
      set(ENV{E_OSVER} "pi")
    else()
      set(ENV{E_OSVER} "generic")
    endif()
  endif()

  # Compiler name, used as part of library and temporary folder name.
  if (NOT DEFINED ENV{E_COMPILER})
    set(ENV{E_COMPILER} "gcc")
  endif()

  # Root path for build.
  if (NOT DEFINED ENV{E_ROOT})
    set(ENV{E_ROOT} "/coderoot")
  endif()

  # DO not compile rpaths in. This allows installing to separate location
  # if (NOT $ENV{E_OSVER} MATCHES "pi")
    set(CMAKE_SKIP_RPATH TRUE)
  # endif()
endif()

# Postfix letter "d" for debug libraries and binaries.
if (CMAKE_BUILD_TYPE MATCHES Debug)
  set(E_POSTFIX "d")
else()
  set(E_POSTFIX "")
endif()

# Include paths.
include_directories("$ENV{E_ROOT}/eosal")
include_directories("$ENV{E_ROOT}/eosal/dependencies/eosal_jpeg")

# Library path.
set(ENV{E_LIB} "$ENV{E_ROOT}/lib/$ENV{E_OS}_$ENV{E_OSVER}_$ENV{E_COMPILER}")
set(ENV{E_LIBOUT} "$ENV{E_LIB}")

# Binary path.
set(ENV{E_BIN} "$ENV{E_ROOT}/bin/$ENV{E_OS}")

# Set path to operating system specific scripts by build environment.
if (NOT DEFINED ENV{E_BUILD_BIN})
  if(WIN32)
    set(ENV{E_BUILD_BIN} "$ENV{E_ROOT}/eosal/build/bin/windows")
    set(ENV{PATH} "$ENV{PATH};$ENV{E_BUILD_BIN}")
  else()
    set(ENV{E_BUILD_BIN} "$ENV{E_ROOT}/eosal/build/bin/linux")
    set(ENV{PATH} "$ENV{PATH}:$ENV{E_BUILD_BIN}")
  endif()
endif()

# Temporary file path.
set(ENV{E_TMP} "$ENV{E_ROOT}/tmp/$ENV{E_OS}_$ENV{E_OSVER}_$ENV{E_ARCH}_$ENV{E_COMPILER}")

# Commonly used libraries for eosal console application.
set(ENV{OSAL_CONSOLE_APP_LIBS} "eosal${E_POSTFIX}")

# Commonly used libraries for eosal application with TLS communication.
set(ENV{OSAL_TLS_APP_LIBS} "eosal_jpeg${E_POSTFIX};eosal${E_POSTFIX}")

# Commonly used libraries for objects console application.
set(ENV{E_COMMON_CONSOLE_APP_LIBS} "eobjects${E_POSTFIX};eosal${E_POSTFIX}")

# Follow target build to select system libraries, not the build environment
if($ENV{E_OS} MATCHES "windows")
  set(ENV{OSAL_CONSOLE_APP_LIBS} "$ENV{OSAL_CONSOLE_APP_LIBS};WS2_32")
  set(ENV{OSAL_TLS_APP_LIBS} "$ENV{OSAL_TLS_APP_LIBS};ssl;crypto;pthread")
  set(ENV{E_COMMON_CONSOLE_APP_LIBS} "$ENV{E_COMMON_CONSOLE_APP_LIBS};WS2_32")
endif()
if($ENV{E_OS} MATCHES "linux")
  include_directories("$ENV{E_ROOT}/eosal/dependencies/linux/include")
  set(ENV{E_LIB} "$ENV{E_ROOT}/eosal/dependencies/linux/$ENV{E_OS}_$ENV{E_OSVER}_$ENV{E_ARCH}_$ENV{E_COMPILER};$ENV{E_LIB}")
  set(ENV{OSAL_CONSOLE_APP_LIBS} "$ENV{OSAL_CONSOLE_APP_LIBS};pthread")
  set(ENV{OSAL_TLS_APP_LIBS} "$ENV{OSAL_TLS_APP_LIBS};mbedtls${E_POSTFIX};mbedx509${E_POSTFIX};mbedcrypto${E_POSTFIX}")
  # set(ENV{OSAL_TLS_APP_LIBS} "$ENV{OSAL_TLS_APP_LIBS};ssl${E_POSTFIX};crypto${E_POSTFIX}")
  set(ENV{OSAL_TLS_APP_LIBS} "$ENV{OSAL_TLS_APP_LIBS};dl;pthread")
  set(ENV{E_COMMON_CONSOLE_APP_LIBS} "$ENV{E_COMMON_CONSOLE_APP_LIBS};pthread")
endif()
if($ENV{E_OS} MATCHES "espidf")
  set(ENV{OSAL_CONSOLE_APP_LIBS} "$ENV{OSAL_CONSOLE_APP_LIBS}")
  set(ENV{OSAL_TLS_APP_LIBS} "$ENV{OSAL_TLS_APP_LIBS};mbedtls${E_POSTFIX};mbedx509${E_POSTFIX};mbedcrypto${E_POSTFIX}")
endif()

# Add defines to indicate target operating system and target OS version (at level needed for build).
add_definitions(-DE_OS_$ENV{E_OS})
add_definitions(-DE_OSVER_$ENV{E_OSVER})
add_definitions(-DE_ARCH_$ENV{E_ARCH})

# Add gcc compiler warnings and -fPIC (position independent code) flags.
if($ENV{E_COMPILER} MATCHES "gcc")
   if(NOT CMAKE_C_FLAGS MATCHES "-Wall")
     set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")
   endif()
   if(NOT CMAKE_CXX_FLAGS MATCHES "-Wall")
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
   endif()

   if(NOT CMAKE_C_FLAGS MATCHES "-fPIC")
     set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
   endif()
   if(NOT CMAKE_CXX_FLAGS MATCHES "-fPIC")
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
   endif()
endif()

# if($ENV{E_OS} MATCHES "windows")
#   # Force to always compile with W4
#   if(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
#     string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
#   else()
#     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
#   endif()
# elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
#   # Update if necessary
#   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-long-long -pedantic")
# endif()

